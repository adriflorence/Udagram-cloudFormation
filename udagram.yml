AWSTemplateFormatVersion: 2010-09-09

Description: >
    Adri Forczek / Udagram 2020

# can only be reference from Resources and Outputs
Parameters:

  ProjectName:
    Type: String

  EnvironmentName:
    Type: String

  VPCCidrBlock:
    Type: String

  PrivateSubnet1CIDR:
    Type: String

  PrivateSubnet2CIDR:
    Type: String

  PublicSubnet1CIDR:
    Type: String

  PublicSubnet2CIDR:
    Type: String

  AutoScalingGroupMinSize:
    Type: String

  AutoScalingGroupMaxSize:
    Type: String


Resources:

  # Profile with a read-only role

  S3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3ReadOnlyEC2
      # trust policy that is associated with this role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "S3ReadOnlyAccess"
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource: "*"

  ProfileWithRoles:
    Type: AWS::IAM::InstanceProfile
    DependsOn: S3ReadOnlyEC2
    Properties: 
      Roles:
        - !Ref S3ReadOnlyEC2

  # network layer

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      Tags:
        -
          Key: ProjectName
          Value: !Sub ${ProjectName}
        -
          Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet2CIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet1CIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet2CIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Elastic IP address from AWS's address pool
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: AttachGateway

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc # Set to vpc to allocate the address for use with instances in a VPC
    DependsOn: AttachGateway

  # a Network Address Translation (NAT) gateway allows
  # instances in a private subnet to connect to the Internet or to other AWS services,
  # but prevents the Internet from initiating a connection with those instances
  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      # allocation ID of an Elastic IP address to associate with the NAT gateway
      AllocationId: !GetAtt EIP1.AllocationId
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName} 

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt EIP2.AllocationId
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName} 

  # required for routes
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: AttachGateway

  PublicRouteSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicRouteSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # private route tables x2
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  # private routes x2
  PrivateRouteSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      NatGatewayId: !Ref NATGateway1
      DestinationCidrBlock: 0.0.0.0/0

  PrivateRouteSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      NatGatewayId: !Ref NATGateway2
      DestinationCidrBlock: 0.0.0.0/0

  # associate routes with private subnets
  PrivateRouteSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2


  # servers
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC
      # outbound rule for a security group
      # permits instances to send traffic
      # to the specified IPv4 or IPv6 CIDR address ranges
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"
      # inbound rule for a security group
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VPC   # attached to the vpc

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: "ami-0713f98de93617bb4"
      InstanceType: "t3.small"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      IamInstanceProfile: !Ref ProfileWithRoles
      SecurityGroups:
        - Ref: SecurityGroup

      # Each instance that is launched has an associated root device volume
      # either an Amazon EBS volume or an instance store volume.
      # Block device mappings can specify additional EBS volumes
      # or instance store volumes to attach to an instance when it is launched.
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10' # 10GB disk space

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Sub ${AutoScalingGroupMinSize}
      MaxSize: !Sub ${AutoScalingGroupMaxSize}
      HealthCheckGracePeriod: 10
      # a list of subnet IDs for a VPC
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      # a list of Amazon Resource Names
      TargetGroupARNs:
        - !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Port: 80
      Protocol: "HTTP"
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC
  
  # load balancer

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for the load balancer
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VPC

  LoadBalancer:
    # V2 = specifies an Application Load Balancer or a Network Load Balancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: 
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          # Amazon Resource Name (ARN)
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      # allowed values: HTTP | HTTPS | TCP | TCP_UDP | TLS | UDP
      Protocol: "HTTP"

  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        # allowed values: http-header | http-request-method | host-header | path-pattern | query-string | source-ip
        - Field: path-pattern
          Values: [ "/" ]
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
    
  # outputs

